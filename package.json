{
  "name": "config-view",
  "displayName": "Config View",
  "description": "Modified from arepl-python to view mm configs",
  "version": "0.1.1",
  "publisher": "Allent",
  "engines": {
    "vscode": "^1.36.0"
  },
  "categories": [
    "Other",
    "Debuggers"
  ],
  "activationEvents": [
    "onCommand:extension.currentConfigViewSession",
    "onCommand:extension.newConfigViewSession",
    "onCommand:extension.newConfigViewSessionOnHighlightedCode",
    "onCommand:extension.executeConfigView",
    "onCommand:extension.executeConfigViewBlock",
    "onCommand:extension.openConfigFilePath"
  ],
  "main": "./out/src/extension",
  "contributes": {
    "menus": {
      "editor/title": [
        {
          "when": "editorLangId == python && !config-view && editorHasSelection && config.ConfigView.showIcons",
          "command": "extension.newConfigViewSession",
          "group": "navigation"
        },
        {
          "when": "editorLangId == python && !config-view && !editorHasSelection && config.ConfigView.showIcons",
          "command": "extension.currentConfigViewSession",
          "group": "navigation"
        },
        {
          "when": "config-view && config.ConfigView.showIcons",
          "command": "extension.closeConfigView",
          "group": "navigation"
        }
      ],
      "editor/title/context": [
        {
          "command": "extension.currentConfigViewSession"
        },
        {
          "command": "extension.newConfigViewSession"
        }
      ],
      "editor/context": [
        {
          "command": "extension.newConfigViewSessionOnHighlightedCode",
          "when": "editorHasSelection"
        },
        {
          "command": "extension.openConfigFilePath",
          "group": "navigation",
          "when": "!terminalFocus && editorLangId == python"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "ConfigView configuration",
      "properties": {
        "ConfigView.showIcons": {
          "type": "boolean",
          "default": true
        },
        "ConfigView.skipLandingPage": {
          "type": "boolean",
          "default": false
        },
        "ConfigView.showFooter": {
          "type": "boolean",
          "default": true
        },
        "ConfigView.customCSS": {
          "type": "string",
          "default": null,
          "description": "injected into ConfigView each run. Use 'Developer: Open Webview Developer Tools' command to inspect config-view html"
        },
        "ConfigView.delay": {
          "type": "number",
          "default": 300,
          "description": "delay in milliseconds before executing code after typing"
        },
        "ConfigView.restartDelay": {
          "type": "number",
          "default": 300,
          "description": "when restart mode is active we add this to delay to delay longer"
        },
        "ConfigView.inlineResults": {
          "type": "boolean",
          "default": true,
          "description": "whether to show errors / results / prints inline. (Currently just error icons)"
        },
        "ConfigView.pyGuiLibraries": {
          "type": "array",
          "default": [
            "matplotlib",
            "tkinter",
            "kivy",
            "pyforms",
            "PyQt4",
            "PyQt5",
            "wx",
            "pyside",
            "plotly",
            "ggplot",
            "bokeh",
            "ppb",
            "PySimpleGUI",
            "pyglet"
          ],
          "description": "ConfigView enters restart mode when one of these libraries are imported. Process is restarted at end of each run so GUI window is updated"
        },
        "ConfigView.whenToExecute": {
          "type": "string",
          "enum": [
            "afterDelay",
            "onSave",
            "onKeybinding"
          ],
          "enumDescriptions": [
            "after a delay (change ConfigView.delay to control the amount)",
            "on save",
            "on keyboard shortcut"
          ],
          "default": "afterDelay",
          "description": "When to execute your code"
        },
        "ConfigView.show_to_level": {
          "type": "number",
          "default": 2,
          "description": "2 shows x=1 and x=[1,2], provides option to expand deeply nested data like x=[[1]]"
        },
        "ConfigView.max_string_length": {
          "type": "number",
          "default": 70,
          "description": "strings over X characters are truncated with an option to expand"
        },
        "ConfigView.printResultPlacement": {
          "type": "string",
          "enum": [
            "top",
            "bottom"
          ],
          "enumDescriptions": [
            "print results appear on top",
            "print results appear on bottom"
          ],
          "default": "top"
        },
        "ConfigView.pythonPath": {
          "type": "string",
          "default": null,
          "description": "ConfigView uses the path you have defined in the official python extension. If not present then this setting will be used. If this setting is also empty then on windows py will be used, or python3 otherwise"
        },
        "ConfigView.envFile": {
          "type": "string",
          "default": null,
          "description": "Absolute path to a file containing environment variable definitions. If not set the setting from the python extension will be used, or ${workspaceFolder}/.env if the python extension is not installed"
        },
        "ConfigView.pythonOptions": {
          "type": "array",
          "default": [
            "-u"
          ],
          "description": "default -u to see prints in real-time. See https://docs.python.org/3/using/cmdline.html#miscellaneous-options for other options. Changing this setting not reccomended"
        },
        "ConfigView.defaultFilterVars": {
          "type": "array",
          "default": [],
          "description": "Any variables with these names are not shown in arepl variable view. You can use the arepl_filter variable in arepl to play around with this setting in real-time"
        },
        "ConfigView.defaultFilterTypes": {
          "type": "array",
          "default": [
            "<class 'module'>",
            "<class 'function'>"
          ],
          "description": "Any variables with these types are not shown in arepl variable view. You can use the arepl_filter_type variable in arepl to play around with this setting in real-time"
        },
        "ConfigView.defaultImports": {
          "type": "array",
          "default": [
            ""
          ],
          "description": "Default imports for new ConfigView sessions. dump is included by default so you can use it to inspect variables & local scopes"
        },
        "ConfigView.unsafeKeywords": {
          "type": "array",
          "default": [
            "rmdir\\(",
            "rmtree\\("
          ],
          "description": "ConfigView will not evaulate your code in real-time mode if one of these keywords are detected. Keywords are applied via regex."
        },
        "ConfigView.telemetry": {
          "type": "boolean",
          "default": true,
          "description": "Whether to report useful anonymous data back to developer."
        },
        "ConfigView.showSyntaxErrors": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show syntax errors."
        },
        "ConfigView.showNameErrors": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show name errors."
        },
        "ConfigView.showGlobalVars": {
          "type": "boolean",
          "default": true,
          "description": "Whether to show global vars. Potential speed improvement if turned off - you can still inspect vars with dump()"
        },
        "ConfigView.shell_plus": {
          "type": "boolean",
          "default": false,
          "description": "Whether to automatically load django models. This setting doesn't actually do anything yet. See https://github.com/Almenon/ConfigView-vscode/issues/279"
        },
        "ConfigView.keepPreviousVars": {
          "type": "boolean",
          "default": false,
          "description": "If set to true ConfigView will add onto the local state each run instead of clearing it and starting fresh."
        },
        "ConfigView.openConfigFilePath.startingPath": {
          "type": "string",
          "default": "/",
          "description": "Starting path. Can also be and sequence of strings separated by comma."
        },
        "ConfigView.openConfigFilePath.searchExclusion": {
          "type": "array",
          "default": [
            "**/node_modules/**",
            "**/.vscode/**"
          ],
          "description": "Global search exclusion (global patterns)"
        },
        "ConfigView.openConfigFilePath.regExp": {
          "type": "string",
          "default": "['|\"]([^'|\"]+)['|\"]",
          "description": "Custom matching regExp to detect the file (default between quotes of double quotes)"
        },
        "ConfigView.openConfigFilePath.matchFileName": {
          "type": "boolean",
          "default": false,
          "description": "Choose to search and match the pure filename or the entire path"
        }
      }
    },
    "commands": [
      {
        "command": "extension.currentConfigViewSession",
        "title": "view mm configs in real time (current doc)",
        "category": "ConfigView",
        "icon": "./media/mmConfigView.svg"
      },
      {
        "command": "extension.newConfigViewSession",
        "title": "view mm configs in real time (new doc)",
        "category": "ConfigView",
        "icon": "./media/mmConfigView.svg"
      },
      {
        "command": "extension.closeConfigView",
        "title": "closes ConfigView",
        "category": "ConfigView",
        "icon": "./media/mmConfigViewDelete.svg"
      },
      {
        "command": "extension.newConfigViewSessionOnHighlightedCode",
        "title": "open highlighted code in new ConfigView session",
        "category": "ConfigView"
      },
      {
        "command": "extension.executeConfigView",
        "title": "trigger a run in the current ConfigView session",
        "category": "ConfigView"
      },
      {
        "command": "extension.executeConfigViewBlock",
        "title": "execute the current block of code",
        "category": "ConfigView"
      },
      {
        "command": "extension.openConfigFilePath",
        "title": "Open config file from path",
        "category": "ConfigView"
      }
    ],
    "keybindings": [
      {
        "command": "extension.currentConfigViewSession",
        "key": "ctrl+shift+a",
        "mac": "cmd+shift+a",
        "when": "!inQuickOpen && !terminalFocus"
      },
      {
        "command": "extension.newConfigViewSession",
        "key": "ctrl+shift+q",
        "mac": "cmd+shift+r",
        "when": "!inQuickOpen && !terminalFocus"
      },
      {
        "command": "extension.executeConfigView",
        "key": "ctrl+shift+;",
        "mac": "cmd+shift+;",
        "when": "!inQuickOpen && !terminalFocus && editorLangId == python"
      },
      {
        "command": "extension.executeConfigViewBlock",
        "key": "ctrl+enter",
        "mac": "cmd+enter",
        "when": "editorTextFocus && editorLangId == python"
      },
      {
        "command": "extension.printDir",
        "key": "alt+enter",
        "mac": "alt+enter",
        "when": "editorTextFocus && editorLangId == python"
      },
      {
        "command": "extension.openConfigFilePath",
        "key": "alt+d",
        "mac": "alt+d",
        "when": "!terminalFocus && editorLangId == python"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "compileOnce": "tsc -p ./",
    "test": "tsc -p ./ && node ./out/test/runTest.js",
    "unitTests": "mocha -ui tdd -r ts-node/register test/*.spec.ts",
    "visualize": "depcruise --exclude 'vscode|^[a-zA-Z0-9\\_]+$' --output-type dot src | dot -T svg > dependencygraph.svg",
    "vscode:uninstall": "node ./out/src/uninstallSurvey"
  },
  "devDependencies": {
    "@types/glob": "^7.1.1",
    "@types/mocha": "^5.2.6",
    "@types/node": "^12.11.7",
    "@types/vscode": "^1.36.0",
    "decache": "^4.4.0",
    "glob": "^7.1.4",
    "mocha": "^6.1.4",
    "source-map-support": "^0.5.13",
    "ts-node": "^8.6.2",
    "typescript": "^3.9.6",
    "vscode-test": "^1.3.0",
    "vscode-uri": "^2.1.2"
  },
  "dependencies": {
    "arepl-backend": "^1.3.15",
    "opn": "^5.3.0",
    "path": "^0.12.7",
    "recursive-readdir": "^2.2.2",
    "vscode-extension-telemetry": "0.1.2"
  },
  "bugs": {
    "url": "https://github.com/AllentDan/arepl-vscode/issues",
    "email": "AllentDan@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/AllentDan/arepl-vscode.git"
  },
  "license": "SEE LICENSE IN <filename>",
  "keywords": [
    "python",
    "real-time",
    "scratchpad"
  ],
  "icon": "media/mmConfigViewFilled.png"
}
